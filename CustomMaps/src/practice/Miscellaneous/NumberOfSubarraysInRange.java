package practice.Miscellaneous;

/**
 * Created by arindam.das on 22/09/16.
 */
public class NumberOfSubarraysInRange {
    static int nC2(int n){
        if(n<2){
            return 1;
        }
        return n*(n-1)/2;
    }

    static int[] getCumArray(int[] array){
        int[] cumArray = new int[array.length];
        cumArray[0] = array[0];
        for(int i = 1; i < array.length; i++){
            cumArray[i] = cumArray[i-1] + array[i];
        }
        return cumArray;
    }

    static int countBrute(int[] array, int k){
        int ctr = 0;
        int n = array.length;
        int[] cumArray = getCumArray(array);
        for(int i = 0; i < n; i++){
            for(int j = i; j < n; j++){
                int sum = cumArray[j];
                if(i > 0){
                    sum -= cumArray[i-1];
                }
                if(sum < k){
                    ctr++;
                }
            }
        }
        return ctr;
    }

    static int countBrute(int[] array, int min, int max){
        int ctr = 0;
        int n = array.length;
        int[] cumArray = new int[n];
        cumArray[0] = array[0];
        for(int i = 1; i < n; i++){
            cumArray[i] = cumArray[i-1] + array[i];
        }

        for(int i = 0; i < n; i++){
            for(int j = i; j < n; j++){
                int sum = cumArray[j];
                if(i > 0){
                    sum -= cumArray[i-1];
                }
                if(sum >= min && sum <= max){
                    ctr++;
                }
            }
        }
        return ctr;
    }

    static int countX(int start, int end){
        return end-start+1;
    }

    static int countOptimal(int[] array, int k){
        int start = 0;
        int end = 0;
        int sum = array[start];
        int n = array.length;
        int count = 0;
        while(start<=end && end < n-1){
            while(end < n-1 && sum+array[end+1]<k ){
                sum += array[end+1];
                end++;
            }
            if(sum < k){
                count += countX(start, end);
            }
            if(start < end){
                sum -= array[start];
                start++;
            }else if(start == end && end < n-1){
                sum = array[start+1];
                start++;
                end++;
            }
        }
        while(start<=end){
            if(sum < k){
                count += countX(start, end);
            }
            sum -= array[start];
            start++;
        }
        return count;
    }

    static int countOptimal(int[] array, int min, int max){
        return countOptimal(array, max+1)-countOptimal(array, min);
    }

    public static void main(String[] args){
//        int[] array = {9,4,11,5,6};
//        int k = 10;
//        int min = 10;
//        int max = 20;
//        System.out.println("countBrute " + countBrute(array, k));
//        System.out.println("countOptimal " + countOptimal(array, k));
//        System.out.println("================================");
//        System.out.println("countBrute " + countBrute(array, min, max));
//        System.out.println("countOptimal " + countOptimal(array, min, max));
        int[] array = {9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3
                ,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3
                ,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3
                ,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3
                ,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3
                ,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3
                ,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3
                ,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3
                ,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3
                ,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,
                9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3,9,4,1,5,4,1,2,9,8,6,3,12,66,21,3};
        int min = 17;
        int max = 122;
        long start = System.currentTimeMillis();
//        System.out.println(System.currentTimeMillis());
        System.out.println("countBrute " + countBrute(array, min, max));
        System.out.println(System.currentTimeMillis()-start);
        start = System.currentTimeMillis();
        System.out.println("countOptimal " + countOptimal(array, min, max));
        System.out.println(System.currentTimeMillis()-start);
    }
}
