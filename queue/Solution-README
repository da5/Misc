Assumptions I have made while implementation
---------------------------------------------
1) All messages are string literals which happens to be unique for a given queue so that there is no need for
maintaining an unique ID for every message. This assumption might not sound fair in terms of quality in
a production code, I had to do this for faster development. Nevertheless, similar messages could be appended
with unique UUIDs to distinguish them from each other while pushing in queues, and at the same time the UUID could
be separated from the message by the consumer.
2) The only reserved character is '~' which I am using as a delimiter for file-based implementation for QueueService.

In-memory implementation
-------------------------
1) I am having a disposer thread which does the following at regular interval:
    a) Purges the suppressed messages that were deleted
    b) Restores the suppressed messages with visibility timeout
    c) Due to polling by the disposer, there could be a lag between the visibility-timeout and the actual time it is
    restored.
2) Visibility timeout could be maintained(in my implementation) at message-level but I didn't implement the
functionality(as in AWS SQS) of changing visibility value of message once pulled from queue.
3) The class uses it's own 'Clock' for processing timeouts and it also served the purpose of advancing the
clock(via. protected method) during unit-tests to remove dependency on sleep.
4) There are 2 test cases I have covered:
    a) Concurrent access to queues
    b) Visibility timeout based restoring of messages and purging of deleted messages

File-based implementation
--------------------------
Same as In-Memory implementation with the only difference of using file system as follows
1) directory-prefix is chosen by the user of the service
    a) <directory-prefix>/<queue-name>/messages
    b) <directory-prefix>/<queue-name>/suppressed
    c) <directory-prefix>/<queue-name>/marked
    d) <directory-prefix>/<queue-name>/.lock/
2) During initialization of the service, the directory-prefix location(if any) is removed from the file system

AWS SQS - SDK implementation
-----------------------------
It is a very basic implementation using the AWS SDK libraries with the assumption that things like concurrent access,
visibility timeout, etc, would be taken care by the framework. I could not come up with test-cases.